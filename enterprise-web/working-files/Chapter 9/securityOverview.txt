
 -- Security overview

    # We've touched on security topics already:

      ## Data validation

      ## Paramterized DB queries to protect against 'SQL injection'

      ## Storing password hashes instead of passwords in a DB

    # Now the focus turns to security at two levels:

      ## Wire-level (transport-level) security: HTTPS

      ## Users/roles security: user authentication and role authorization
==========================================================================================

 -- Wire-level security issues and services in an Alice-to-Bob message sending scenario

    # Peer authentication:
              
               message
         Alice--------->Bob or an imposter?  ## Same issue the other way--is it really Alice on the other side?

    # Confidentiality (message encryption/decryption)

               message  +----------------+ encrypted message  +----------------+ message
         Alice--------->| encrypt engine |------------------->| decrypt engine |--------->Bob
                        +----------------+        /           +----------------+
                                      the 'wire' or communications channel

    # Integrity

               sent message      received message
         Alice-------------->...------------------>Bob ## Does sent message == received message?
                              \
                           the 'wire'

    # Summary in words:

      ## peer authentication: Alice authenticates her identity to Bob, and Bob does the same to Alice.
         ### In practice, the authentication is often one-way: the receiver authenticates to the sender.
     
      ## confidentiality: Alice encrypts messages sent to Bob, who then decrypts them; same the other way.

      ## integrity: When Bob receives a message, he can confirm that it's the same message that Alice sent.
=================================================================================================================

 -- Users/roles security 
 
   ## Akin to the security in place when we log into a digital device: the OS maintains a 'password file' (with
      password hashes), and groups users in order to implement access rights at the group level.
         
   For instance, a 'login name'                      Is the user a 'senior DB admin'?
            \                                                 \
          identity  +---------------------+ optional  +--------------------+
     user---------->| user authentication |---------->| role authorization |------->user's access rights
                    +---------------------+           +--------------------+
                            \                                  \ 
                         phase 1                             phase 2

  ## Two phase process in which a user provides a credential that verifies the user's identity:
  
     ### The first phase is user authentication: for instance, Alice uses a password, retinal scan,
	 digital certificate, or the like to confirm her identity as Alice.

         #### AWS approach: (a) Client creates a 160-bit hash value using the client's secret key
		            (b) This hash value--and not the secret key--travels over the wire
                            (c) Amazon, with its copy of the secret key, generates another 
                                160-bit value from the same data--and verifies by comparing the two.

     ### The second (and optional) phase is role authorization: for instance, a database lookup
	 confirms that Alice is authorized to read/write/delete a particular resource, but the
         comparable lookup confirms that Bob is authorized only for read operations on the resource.
