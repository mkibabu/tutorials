
 -- HTTPS exercise

    # The gist is to repeat the process that we've gone through: doing it from start to finish is worth the effort.

    # The details:

      -- Use the keytool or equivalent to create a DC. If you've time, you might experiment with a different tool.
         For instance, the command-line 'openssl' tool is available on Unix-like systems and, through GNU, on 
         Windows as well.

         ## The 'openssl' tool doesn't know about keystores and truststores, but does know about DCs; and the keytool
            can be used to import DCs into a keystore or truststore.

      -- Configure Tomcat (conf/server.xml) so that it can support HTTPS connections.

         ## In the example we covered, I put the keystore ('devel.keystore') with my self-signed DC in my home directory,
            but a better location would be under TOMCAT_HOME, e.g., TOMCAT_HOME/conf/certs.

         ## The location of the keystore is arbitrary, as the configuration entry in server.xml can specify any location
            on the local file system.

      -- Pick a multi-page web app already done (e.g., the skiEquip app with its various confirmation pages), or 
         write your own app from scratch, and configure it for HTTPS.

         ## Experiment with two variations: in the first, enforce HTTPS for all pages; in the second, create
            a 'secured' subdirectory in the deployed WAR file, and enforce HTTPS only for these pages. Here's 
            a depiction:

                       myApp.war
                          | welcome.html, shop1.jsp,...      ## top-level of WAR file -- understood to be unsecured
                          |  
                       secured                               ## subdirectory
                            secured1.jsp, secured2.jsp,...

     
