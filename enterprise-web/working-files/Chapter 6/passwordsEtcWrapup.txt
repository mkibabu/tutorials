
 -- Wrapup of digested salted passwords, and other recent topics

    # The security issue that prompted a look at password salting and hashing:

      ## It's a security risk to store user passwords, as is, in the server's DB.

      ## A password 'hash' or 'message digest' is a fixed-length byte sequence generated from the password.

         ### In our example, the fixed length is 32 bytes; the algorithm is SHA-256.

         ### A message digest is 'one-way secure': it's easy to go from the message (password) to its digest,
             but computationally expensive (indeed, intractable) to go from the digest to the password--even
             if the hash algorithm is known.

         ### Identical passwords have identical hashes, given the same algorithm.

             #### User passwords tend to be short, 7 to 10 characters -- not much randomness.

             #### To 'salt' a password is to add randomly generated bits to it, thereby increasing its length.

         ### The salted password then can be be hashed to get the message-digest bytes.

    # OSes have long used the 'hased password file' as a security mechanism: the password file
      might get stolen, but that's not a disaster if this file contains only hashes, not actual passwords.

    # The upshot: Don't persist user's password. Instead, persist a digest of a user's salted password.

      ## Modern DBs such as PostgreSQL have the appropriate data type for doing so: in PostgreSQL's case, that
         type is 'bytea' (byte array).



