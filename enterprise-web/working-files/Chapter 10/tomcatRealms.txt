
 -- Tomcat security realms

    # In the 'urSecure' web app, we used the default Tomcat security 'realm' and its associated file,
      TOMCAT_HOME/conf/tomcat-users.xml.
    
    # A 'realm' is a datastore with user identities (e.g., login  names), credentials (e.g., passwords),
      and security roles.
   
      ## A given realm also includes whatever code infrastructure is required for realm use.

      ## In general, realms are created and configured in the main Tomcat config file, TOMCAT_HOME/conf/server.xml

      ## For convenience, 'auth/auth info' refers to user-authentication/role-authorization information.

    # Background technologies:

      ## JNDI: Java Naming and Directory Interface, an API for:

         ## Associating names with resources within a prescribed syntax (the 'Naming' part).

            -- Sample name from the skiDB.jsp script:

                  url = "jdbc:postgresql://localhost:5432/skistuff"  ## JNDI-compliant name

         ## Associating names with resources and specifying attributes on such 'bindings' (the
            'Directory' part)

         ## Typically described as the Java EE 'naming and directory service'.

            ### JNDI is the 'interface', and a 'provider' furnishes the implementation.

    # The built-in security realms are:

      -- JDBCRealm: auth/auth info is stored in a relational database, and accessed through a JDBC driver.

      -- DataSourceRealm: auth/auth info is stored in a relational database, accessed through a named
         JNDI JDBC 'DataSource'.

      -- JNDIRealm: auth/auth info is stored in an LDAP based directory server, accessed through a JNDI provider.

      -- UserDatabaseRealm: auth/auth info stored in an UserDatabase JNDI resource, which is typically
         persisted as an XML document on the local file system, with TOMCAT_HOME/conf/tomcat-users.xml as
	 the default. This realm is the default, and well suited to development.

         -- UserLockOutRealm: subtype to prevent brute-force attacks that guess passwords ('dictionary attacks')
                            
      -- MemoryRealm: in effect, an earlier version of UserDatabaseRealm 

      -- JAASRealm: auth/auth info access through the JAAS (Java Authentication and Authorization Service) framework,
         with complete flexibility in how the info is persisted.

      ## Users can create and configure additional realms.

         -- Example from TOMCAT_HOME/conf/server.xml:

         <Realm className="org.apache.catalina.realm.LockOutRealm">
           <!-- This Realm uses the UserDatabase configured in the global JNDI
                resources under the key "UserDatabase".  Any edits
                that are performed against this UserDatabase are immediately
                available for use by the Realm.  -->
           <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
                  resourceName="UserDatabase"/>
         </Realm>
