@model IEnumerable<MVCMovie.Models.Movie>
<!--
    Recall that the INdex controller has the following return line:
    return View(db.Movies.ToList());
    The "model IENumerable<MVCMovie.Models.Movie" allows the view to access the
    list of movies passed by the Controller via a strongly-typed Model
-->
@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

<!--
    A HTML object is an object that helps render html elements. For a link, call
    Html.ActionLink("linkInnerText", "nameOfActionCalled") to return a simple link
-->
<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table>
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Title)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ReleaseDate)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Genre)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Price)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.Title)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.ReleaseDate)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Genre)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Price)
        </td>
        <td>
            <!--  ActionLink("linkText", "actionName", objectWithParametersNeeded) -->
            @Html.ActionLink("Edit", "Edit", new { id=item.ID }) |
            @Html.ActionLink("Details", "Details", new { id=item.ID }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.ID })
        </td>
    </tr>
}

</table>
